---

- name: create multiple users
  users:
    users: "{{ present_users }}"


# - name: create users, with home directories
#   user:
#     name: "{{ item.username }}"
#     uid: "{{ item.uid | default(omit, True) }}"
#     password: "{{ item.password if item.password is defined else '!' }}"
#     update_password: "{{ item.update_password if item.update_password is defined else users_default_update_password }}"
#     groups: "{{ item.groups | default(omit) }}"
#     shell: "{{ item.shell if item.shell is defined else users_default_shell }}"
#     createhome: true
#     comment: "{{ item.comment if item.comment is defined else '' }}"
#     state: "{{ item.user_state }}"
#   when:
#     - item.user_state in ('present', 'lock')
#   loop:
#     "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}"
#
# - name: fix right for user home
#   file:
#     path: "/home/{{ item.username }}"
#     mode: 0750
#   when:
#     - item.user_state in ('present', 'lock')
#   loop:
#     "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}"
#
# - name: find primary group for user
#   getent:
#     database: group
#     key: "{{ item.username }}"
#     split: ':'
#   register: __getent
#   loop:
#     "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}"
#
# - name: define primary group for users
#   set_fact:
#     present_users: "{{ present_users | add_primary_group(__getent) }}"
#   loop_control:
#     label: "username: {{ item.username }}"
#
# - name: create custom directory for authorized key
#   file:
#     state: directory
#     mode: 0755
#     owner: root
#     group: root
#     path: "{{ item.ssh_key_directory }}"
#   when:
#     - item.user_state == 'present'
#     - item.ssh_key_directory is defined
#     - item.ssh_key_directory | length > 0
#   loop:
#     "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}, directory: {{ item.ssh_key_directory | default('') }}"
#
# # unlock account if locked
# - name: unlock password login
#   user:
#     name: "{{ item.username }}"
#     expires: -1
#   when:
#     - item.user_state == 'present'
#   loop:
#     "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}"
#
# # lock account if not locked
# - name: lock password & ssh key authentication
#   user:
#     name: "{{ item.username }}"
#     expires: 0
#   when:
#     - item.user_state == 'lock'
#   with_items:
#     - "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}"
#
# - name: create .ssh directory in user home
#   file:
#     path: "/home/{{ item.username }}/.ssh"
#     state: directory
#     owner: "{{ item.username }}"
#     group: "{{ item.primary_group }}"
#     mode: 0700
#   loop:
#     "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}"
#
# # add ssh private key
# - name: add ssh private key in user home
#   copy:
#     dest: "/home/{{ item.0.username }}/.ssh/{{ item.1.type }}"
#     content: "{{ item.1.content }}"
#     owner: "{{ item.0.username }}"
#     group: "{{ item.0.primary_group }}"
#     mode: 0600
#   # no_log: true
#   loop:
#     "{{ present_users | subelements('ssh_private_key', skip_missing=True) }}"
#   when:
#     - item.0.user_state in ('present', 'lock')
#   loop_control:
#     label: "username: {{ item.0.username }}, user_state: {{ item.0.user_state }}"
#
# # ------------------------------------------------------------------------------------------------
#
# - name: add authorized key for ssh key authentication
#   authorized_key:
#     user: "{{ item.username }}"
#     key: "{{ item.ssh_key }}"
#     # path: "{{ item.ssh_key_directory | default('') }}/{{ item.username }}"
#     exclusive: "{{ item.exclusive_ssh_key if item.exclusive_ssh_key is defined else 'no' }}"
#     state: "{{ item.user_state | default('present', true) }}"
#   when:
#     - item.ssh_key is defined
#     - item.user_state in ('present', 'lock')
#     - not item.ssh_key_directory is defined
#   loop:
#     "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}"
#
# - name: add central authorized key for ssh key authentication
#   authorized_key:
#     user: "{{ item.username }}"
#     key: "{{ item.ssh_key }}"
#     path: "{{ item.ssh_key_directory | default('') }}/{{ item.username }}"
#     exclusive: "{{ item.exclusive_ssh_key if item.exclusive_ssh_key is defined else 'no' }}"
#     # mode: 0666
#     state: "{{ item.user_state | default('present', true) }}"
#   when:
#     - item.ssh_key is defined
#     - item.ssh_key_directory is defined
#     - item.ssh_key_directory | length > 0
#     - item.user_state in ('present', 'lock')
#   loop:
#     "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}"
#
# - name: create user sudoers file and validate
#   lineinfile:
#     dest: /etc/sudoers
#     state: "{{ item.user_state | default('present', true) }}"
#     regexp: '^{{ item.username }} '
#     line: "{{ item.username }} ALL=(ALL) {{ 'NOPASSWD:' if ( item.use_sudo_nopass | default(false) )  else '' }}ALL"
#     validate: 'visudo -cf %s'
#   environment:
#     PATH: /usr/sbin:/usr/local/sbin:/sbin
#   when:
#     - item.use_sudo | default(false)
#   loop:
#     "{{ present_users }}"
#   loop_control:
#     label: "username: {{ item.username }}"

...
