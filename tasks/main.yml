---

- name: Fail when username or user_state are not defined
  assert:
    that:
      - item.username is defined
      - item.username | length != 0
      - item.user_state is defined
      - item.user_state | length != 0
      - item.user_state in ('present', 'lock', 'absent')
    quiet: true
  loop:
    "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}"

- name: add users | create users, shell, home dirs
  user:
    name: "{{ item.username }}"
    uid: "{{ item.uid | default(omit, True) }}"
    password: "{{ item.password if item.password is defined else '!' }}"
    update_password: "{{ item.update_password if item.update_password is defined else users_default_update_password }}"
    groups: "{{ item.groups | default(omit) }}"
    shell: "{{ item.shell if item.shell is defined else users_default_shell }}"
    createhome: true
    comment: "{{ item.comment if item.comment is defined else '' }}"
    state: "{{ item.user_state }}"
  when:
    - item.user_state in ('present', 'lock')
  loop:
    "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

- name: fix right for user home
  file:
    path: "/home/{{ item.username }}"
    mode: 0750
  when:
    - item.user_state in ('present', 'lock')
  loop:
    "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

- name: find primary group for user
  getent:
    database: group
    key: "{{ item.username }}"
    split: ':'
  register: __getent
  when:
    - item.user_state in ('present', 'lock')
  loop:
    "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}"

- name: set primary group for users
  set_fact:
    users: "{{ users | add_primary_group(__getent) }}"
  loop_control:
    label: "username: {{ item.username }}"

# unlock account if locked
- name: add users | unlock password login
  user:
    name: "{{ item.username }}"
    expires: -1
  when:
    - item.user_state == 'present'
  loop:
    "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

# lock account if not locked
- name: lock users | lock password & ssh key authentication
  user:
    name: "{{ item.username }}"
    expires: 0
  when:
    - item.user_state == 'lock'
  with_items:
    - "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

- name: create .ssh directory
  file:
    path: "/home/{{ item.username }}/.ssh"
    state: directory
    owner: "{{ item.username }}"
    group: "{{ item.primary_group }}"
    mode: 0700
  when:
    - item.user_state in ('present', 'lock')
  loop:
    "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

# add ssh private key
- name: add ssh private key
  copy:
    dest: "/home/{{ item.0.username }}/.ssh/{{ item.1.type }}"
    content: "{{ item.1.content }}"
    owner: "{{ item.0.username }}"
    group: "{{ item.0.primary_group }}"
    mode: 0600
  # no_log: true
  loop:
    "{{ users | subelements('ssh_private_key', skip_missing=True) }}"
  when:
    - item.0.user_state in ('present', 'lock')
  loop_control:
    label: "username: {{ item.0.username }}, user_state: {{ item.0.user_state }}"

# remove account
- name: remove users
  user:
    name: "{{ item.username }}"
    state: absent
  when:
    - item.user_state == 'absent'
  with_items:
    - "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

- name: remove home directory
  file:
    path: "/home/{{ item.username }}"
    state: absent
  when:
    - item.user_state == 'absent'
  with_items:
    - "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

- name: ssh keys | add authorized key for ssh key authentication
  authorized_key:
    user: "{{ item.username }}"
    key: "{{ item.ssh_key }}"
    exclusive: "{{ item.exclusive_ssh_key if item.exclusive_ssh_key is defined else 'no' }}"
    state: "{{ item.user_state | default('present', true) }}"
  when:
    - item.ssh_key is defined
  loop:
    "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

- name: sudo | add to sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: "{{ item.user_state | default('present', true) }}"
    regexp: '^{{ item.username }} '
    line: "{{ item.username }} ALL=(ALL) {{ 'NOPASSWD:' if ( item.use_sudo_nopass | default(false) )  else '' }}ALL"
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when:
    - item.use_sudo | default(false)
  loop:
    "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}"

- name: sudo | remove from sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: absent
    regexp: '^{{ item.username }} '
    line: '{{ item.username }}'
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when:
    - not item.use_sudo | default(false)
  loop:
    "{{ users }}"
  loop_control:
    label: "username: {{ item.username }}"
